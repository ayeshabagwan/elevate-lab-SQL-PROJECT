<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="etl _database.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3183"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="prod_clean_data" custom_title="0" dock_id="1" table="4,15:mainprod_clean_data"/><dock_state state="000000ff00000000fd0000000100000002000005f4000002aefc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000005f40000013000ffffff000005f40000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="prod_clean_data" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="77"/><column index="2" value="187"/><column index="3" value="249"/><column index="4" value="98"/><column index="5" value="82"/><column index="6" value="163"/><column index="7" value="156"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="stg_raw_dataf" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="77"/><column index="2" value="187"/><column index="3" value="249"/><column index="4" value="98"/><column index="5" value="82"/><column index="6" value="163"/><column index="7" value="156"/><column index="8" value="82"/><column index="9" value="68"/><column index="10" value="60"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="prdouction data">

-- 1. Remove exact duplicate records (based on customer_id + email)
DELETE FROM stg_raw_dataf
WHERE rowid NOT IN (
  SELECT MIN(rowid)
  FROM stg_raw_dataf
  GROUP BY customer_id, email
);

-- 2. Remove NULLs or empty strings from key fields
DELETE FROM stg_raw_data
WHERE customer_id IS NULL OR TRIM(customer_id) = ''
   OR amount_paid IS NULL OR TRIM(amount_paid) = ''
;



-- 3. Normalize Payment Status
UPDATE stg_raw_data
SET payment_status = 'Success'
WHERE LOWER(payment_status) IN ('succss', 'sucess', 'paid', 'done', 'success');

UPDATE stg_raw_dataf
SET payment_status = 'Failed'
WHERE LOWER(TRIM(payment_status)) IN ('fail', 'failed', 'failure', 'not successful', 'unsuccessful', 'fl', 'faled');

UPDATE stg_raw_dataf
SET payment_status = 'Pending'
WHERE LOWER(TRIM(payment_status)) IN ('pending', 'pendng', 'pnding', 'pendiing', 'waiting', 'in progress');

-- 4. 
-- Create temp table with row numbers as IDs
CREATE TABLE temp_cleaned_data AS
SELECT 
  ROW_NUMBER() OVER () AS customer_id,
  customer_name, email, contract_start_date, contract_end_date,
  payment_status, amount_paid, created_at, comment
FROM stg_raw_data;

-- Drop staging and replace
DROP TABLE stg_raw_data;
ALTER TABLE temp_cleaned_data RENAME TO stg_raw_data;

-- Make sure prod table exists
CREATE TABLE IF NOT EXISTS prod_clean_data (
  customer_id INTEGER,
  customer_name TEXT,
  email TEXT,
  payment_status TEXT,
  amount_paid REAL,
  created_at TEXT,
  comment TEXT
);
-- removing null comment
UPDATE stg_raw_dataf
SET comment = 'No comment provided'
WHERE comment IS NULL OR TRIM(comment) = '';

-- Load cleaned data into production
INSERT INTO prod_clean_data
SELECT * FROM stg_raw_dataf;

CREATE TABLE IF NOT EXISTS audit_log (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  table_name TEXT NOT NULL,
  inserted_rows INTEGER NOT NULL,
  load_timestamp TEXT DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO audit_log (table_name, inserted_rows)
SELECT 'prod_clean_data', COUNT(*) FROM prod_clean_data;

SELECT * FROM prod_clean_data;
SELECT * FROM audit_log ORDER BY load_timestamp DESC;



SELECT * FROM prod_clean_data;
</sql><sql name="import data">CREATE TABLE stg_raw_dataf (
  customer_id INTEGER,
  customer_name TEXT,
  email TEXT,
  duplicate_email TEXT,
  payment_status TEXT,
  amount_paid REAL,
  created_at TEXT,
  comment TEXT
);
</sql><sql name="trigger">CREATE TRIGGER fix_payment_status_before_insert
BEFORE INSERT ON prod_clean_data
FOR EACH ROW
BEGIN
  SELECT
    CASE
      WHEN LOWER(NEW.payment_status) IN ('succss', 'sucess', 'done', 'paid') THEN
        RAISE(ABORT, 'Fix payment_status manually before insert.')
  END;
END;

INSERT INTO prod_clean_data (
  customer_id, customer_name, email, payment_status, amount_paid, created_at, comment
)
VALUES (
  999, 'Test User', 'test@example.com', 'succss', 500, '2024-07-01', 'Trigger test'
);

CREATE TRIGGER validate_email_and_number
BEFORE INSERT ON prod_clean_data
FOR EACH ROW
BEGIN
  -- Validate Email: must contain @ and .
  -- This is a basic check due to SQLite's limited regex
  SELECT 
    CASE
      WHEN NEW.email NOT LIKE '%@%' OR NEW.email NOT LIKE '%.%' OR NEW.email LIKE '% %'
      THEN RAISE(ABORT, 'Invalid email format')
    END;

  -- Validate Phone Number: only digits (no special chars)
  SELECT
    CASE
      WHEN NEW.phone_number GLOB '*[^0-9]*'
      THEN RAISE(ABORT, 'Phone number must contain only digits')
    END;
END;


</sql><current_tab id="0"/></tab_sql></sqlb_project>
