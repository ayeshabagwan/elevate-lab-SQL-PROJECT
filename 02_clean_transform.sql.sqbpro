<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="D:/SQL_ETL_PROJECT/etl_database.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1230"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="stg_raw_data" custom_title="0" dock_id="1" table="4,12:mainstg_raw_data"/><dock_state state="000000ff00000000fd0000000100000002000002f2000002a6fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000002f20000012a00ffffff000002f20000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="prod_clean_data" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="77"/><column index="2" value="187"/><column index="3" value="249"/><column index="4" value="119"/><column index="5" value="113"/><column index="6" value="98"/><column index="7" value="82"/><column index="8" value="163"/><column index="9" value="132"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="stg_raw_data" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="77"/><column index="2" value="187"/><column index="3" value="249"/><column index="4" value="97"/><column index="5" value="119"/><column index="6" value="113"/><column index="7" value="98"/><column index="8" value="82"/><column index="9" value="163"/><column index="10" value="132"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">CREATE TABLE stg_raw_data (
  customer_id INTEGER,
  customer_name TEXT,
  email TEXT,
  duplicate_email TEXT,
  contract_start_date TEXT,
  contract_end_date TEXT,
  payment_status TEXT,
  amount_paid REAL,
  created_at TEXT,
  comment TEXT
);
</sql><sql name="SQL 3*">-- 1. Remove exact duplicate records (based on customer_id + email)
DELETE FROM stg_raw_data
WHERE rowid NOT IN (
  SELECT MIN(rowid)
  FROM stg_raw_data
  GROUP BY customer_id, email
);

-- 2. Remove NULLs or empty strings from key fields
DELETE FROM stg_raw_data
WHERE customer_id IS NULL OR TRIM(customer_id) = ''
   OR amount_paid IS NULL OR TRIM(amount_paid) = ''
   OR contract_start_date IS NULL OR TRIM(contract_start_date) = ''
   OR contract_end_date IS NULL OR TRIM(contract_end_date) = '';

-- 3. Remove logically invalid data
DELETE FROM stg_raw_data
WHERE DATE(contract_end_date) &lt; DATE(contract_start_date);

-- 4. Normalize Payment Status
UPDATE stg_raw_data
SET payment_status = 'Success'
WHERE LOWER(payment_status) IN ('succss', 'sucess', 'paid', 'done', 'success');

-- 5. OPTIONAL: Reset Customer ID to start from 1
-- Create temp table with row numbers as IDs
CREATE TABLE temp_cleaned_data AS
SELECT 
  ROW_NUMBER() OVER () AS customer_id,
  customer_name, email, contract_start_date, contract_end_date,
  payment_status, amount_paid, created_at, comment
FROM stg_raw_data;

-- Drop staging and replace
DROP TABLE stg_raw_data;
ALTER TABLE temp_cleaned_data RENAME TO stg_raw_data;

-- Make sure prod table exists
CREATE TABLE IF NOT EXISTS prod_clean_data (
  customer_id INTEGER,
  customer_name TEXT,
  email TEXT,
  contract_start_date TEXT,
  contract_end_date TEXT,
  payment_status TEXT,
  amount_paid REAL,
  created_at TEXT,
  comment TEXT
);

-- Load cleaned data into production
INSERT INTO prod_clean_data
SELECT * FROM stg_raw_data;


CREATE TABLE IF NOT EXISTS audit_log (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  table_name TEXT NOT NULL,
  inserted_rows INTEGER NOT NULL,
  load_timestamp TEXT DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO audit_log (table_name, inserted_rows)
SELECT 'prod_clean_data', COUNT(*) FROM prod_clean_data;

SELECT * FROM prod_clean_data;
SELECT * FROM audit_log ORDER BY load_timestamp DESC;


UPDATE prod_clean_data
SET 
  contract_start_date = contract_end_date,
  contract_end_date = contract_start_date
WHERE DATE(contract_start_date) &gt; DATE(contract_end_date);

SELECT *
FROM prod_clean_data
WHERE DATE(contract_start_date) &gt; DATE(contract_end_date);

UPDATE prod_clean_data
SET payment_status = 'Pending'
WHERE LOWER(TRIM(payment_status)) IN (
  'pendng', 'pnding', 'pendiing', 'pending ', 'pending'
);

UPDATE prod_clean_data
SET contract_end_date = DATE(contract_start_date, '+1 year')
WHERE DATE(contract_end_date) &lt; DATE(contract_start_date);

-- Step 1: Fix date order if start &gt; end
UPDATE prod_clean_data
SET contract_end_date = DATE(SUBSTR(contract_start_date, 7, 4) || '-' || 
                             SUBSTR(contract_start_date, 1, 2) || '-' || 
                             SUBSTR(contract_start_date, 4, 2), '+1 year')
WHERE DATE(SUBSTR(contract_end_date, 7, 4) || '-' || 
           SUBSTR(contract_end_date, 1, 2) || '-' || 
           SUBSTR(contract_end_date, 4, 2)) &lt; 
      DATE(SUBSTR(contract_start_date, 7, 4) || '-' || 
           SUBSTR(contract_start_date, 1, 2) || '-' || 
           SUBSTR(contract_start_date, 4, 2));

UPDATE prod_clean_data
SET contract_start_date = 
    SUBSTR(contract_start_date, 7, 4) || '-' || 
    SUBSTR(contract_start_date, 1, 2) || '-' || 
    SUBSTR(contract_start_date, 4, 2),
    contract_end_date = 
    SUBSTR(contract_end_date, 7, 4) || '-' || 
    SUBSTR(contract_end_date, 1, 2) || '-' || 
    SUBSTR(contract_end_date, 4, 2);

	
	SELECT *
FROM prod_clean_data
WHERE LENGTH(contract_start_date) &lt; 10
   OR LENGTH(contract_end_date) &lt; 10
   OR contract_start_date NOT LIKE '____-__-__'
   OR contract_end_date NOT LIKE '____-__-__';

	
	UPDATE prod_clean_data
SET contract_start_date = NULL
WHERE LENGTH(contract_start_date) &lt; 10
   OR contract_start_date NOT LIKE '____-__-__';

UPDATE prod_clean_data
SET contract_end_date = NULL
WHERE LENGTH(contract_end_date) &lt; 10
   OR contract_end_date NOT LIKE '____-__-__';

SELECT * FROM prod_clean_data
WHERE DATE(contract_end_date) &lt; DATE(contract_start_date);

SELECT * FROM prod_clean_data;

</sql><current_tab id="1"/></tab_sql></sqlb_project>
